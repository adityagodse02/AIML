from collections import deque

class State:
    def __init__(self, missionaries_left, cannibals_left, boat_position):
        self.missionaries_left = missionaries_left
        self.cannibals_left = cannibals_left
        self.boat_position = boat_position  

    def is_valid(self):
        if (self.missionaries_left < 0 or self.cannibals_left < 0 or
            (self.missionaries_left > 0 and self.missionaries_left < self.cannibals_left)):
            return False
        return True

    def is_goal(self):
        return self.missionaries_left == 0 and self.cannibals_left == 0

    def __hash__(self):
        return hash((self.missionaries_left, self.cannibals_left, self.boat_position))

    def __eq__(self, other):
        return (self.missionaries_left == other.missionaries_left and
                self.cannibals_left == other.cannibals_left and
                self.boat_position == other.boat_position)

def get_next_states(state):
    next_states = []
    if state.boat_position == 0:  
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]  
    else:  
        moves = [(-1, 0), (-2, 0), (0, -1), (0, -2), (-1, -1)]  

    for m, c in moves:
        new_state = State(state.missionaries_left - m, state.cannibals_left - c, 1 - state.boat_position)
        if new_state.is_valid():
            next_states.append(new_state)

    return next_states

def bfs():
    initial_state = State(3, 3, 0)  
    queue = deque([initial_state])
    visited = set()
    visited.add(initial_state)

    while queue:
        current_state = queue.popleft()

        if current_state.is_goal():
            return True 

        for next_state in get_next_states(current_state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append(next_state)

    return False  

solution_found = bfs()
solution_found
