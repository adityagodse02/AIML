from collections import deque

class Graph:
    def __init__(self):
        self.graph = {}  

    def add_edge(self, u, v):
        """Add an edge to the graph (undirected)"""
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)

    def bfs(self, start):
        """Perform BFS traversal starting from the given node"""
        visited = set() 
        queue = deque([start])  
        visited.add(start)  

        bfs_order = []  

        while queue:
            node = queue.popleft()  
            bfs_order.append(node)  

            for neighbor in self.graph.get(node, []):
                if neighbor not in visited:
                    visited.add(neighbor) 
                    queue.append(neighbor) 

        return bfs_order

g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(1, 4)
g.add_edge(2, 5)
g.add_edge(2, 6)


bfs_result = g.bfs(0)
bfs_result
