import heapq

class Node:
    def __init__(self, position, g, h):
        self.position = position  
        self.g = g  
        self.h = h  
        self.f = g + h  

    def __lt__(self, other):
        return self.f < other.f  

def heuristic(a, b):
    """Calculate the Manhattan distance heuristic."""
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(start, goal, grid):
    """Perform A* search algorithm."""
    open_list = []
    closed_set = set()
    
    start_node = Node(start, 0, heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        
        if current_node.position == goal:
            return True  

        closed_set.add(current_node.position)

        
        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for dx, dy in neighbors:
            neighbor_pos = (current_node.position[0] + dx, current_node.position[1] + dy)

            if (0 <= neighbor_pos[0] < len(grid) and
                0 <= neighbor_pos[1] < len(grid[0]) and
                grid[neighbor_pos[0]][neighbor_pos[1]] == 0 and
                neighbor_pos not in closed_set):

                g_cost = current_node.g + 1  
                h_cost = heuristic(neighbor_pos, goal)
                neighbor_node = Node(neighbor_pos, g_cost, h_cost)

                if neighbor_node not in open_list:
                    heapq.heappush(open_list, neighbor_node)

    return False  

# Example usage
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)  # Starting position
goal = (4, 4)   # Goal position

solution_found = a_star_search(start, goal, grid)
solution_found
