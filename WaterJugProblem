from collections import deque

def water_jug_problem(capacity_a, capacity_b, target):
    
    queue = deque()
   
    visited = set()
    
    initial_state = (0, 0)
    queue.append(initial_state)
    visited.add(initial_state)
    
    steps = []
    
    while queue:
        a, b = queue.popleft()
        steps.append((a, b))  
        
        if a == target or b == target:
            return steps
       
        possible_states = [
            (capacity_a, b),  
            (a, capacity_b),  
            (0, b),           
            (a, 0),          
            (min(a + b, capacity_a), max(0, b - (capacity_a - a))),  
            (max(0, a - (capacity_b - b)), min(a + b, capacity_b))  
        ]
        
        for state in possible_states:
            if state not in visited:
                visited.add(state)
                queue.append(state)
    
    return None 

# Example usage
capacity_a = 4  
capacity_b = 3  
target = 2     

solution_steps = water_jug_problem(capacity_a, capacity_b, target)
solution_steps
